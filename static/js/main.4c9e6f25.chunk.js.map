{"version":3,"sources":["redux/user/userReducer.js","redux/user/userTypes.js","redux/rootReducer.js","redux/store.js","redux/user/userActions.js","components/UsersContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","users","error","reducer","state","action","type","payload","rootReducer","combineReducers","user","userReducer","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","fetchUsersRequest","fetchUsersSuccess","fetchUsersFailure","connect","userData","dispatch","fetchUsers","axios","get","then","response","data","catch","message","useEffect","Table","striped","bordered","hover","className","style","textAlign","map","index","key","id","src","avatar","alt","first_name","last_name","email","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"k3BAMA,IAAMA,EAAe,CACnBC,SAAS,EACTC,MAAO,GACPC,MAAO,IA0BMC,EAvBC,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAChD,OAAQA,EAAOC,MACb,ICd+B,sBDe7B,OAAO,EAAP,GACKF,EADL,CAEEJ,SAAS,IAEb,IClB+B,sBDmB7B,MAAO,CACLA,SAAS,EACTC,MAAOI,EAAOE,QACdL,MAAO,IAEX,ICvB+B,sBDwB7B,MAAO,CACLF,SAAS,EACTC,MAAO,GACPC,MAAOG,EAAOE,SAElB,QAAS,OAAOH,IExBLI,EAJKC,0BAAgB,CAClCC,KAAMC,ICQOC,EALDC,sBACZL,EACAM,8BAAoBC,0BAAgBC,IAAQC,O,iBCejCC,EAAoB,WAC/B,MAAO,CACLZ,KH1B+B,wBG8BtBa,EAAoB,SAAAlB,GAC/B,MAAO,CACLK,KH/B+B,sBGgC/BC,QAASN,IAIAmB,EAAoB,SAAAlB,GAC/B,MAAO,CACLI,KHrC+B,sBGsC/BC,QAASL,I,QCKb,IAYemB,cAZS,SAACjB,GACvB,MAAO,CACLkB,SAAUlB,EAAMM,OAIO,SAACa,GAC1B,MAAO,CACLC,WAAY,kBAAMD,ED7Cb,SAACA,GACNA,EAASL,KACTO,IACGC,IAAI,sCACJC,KAAK,SAAAC,GAEJ,IAAM3B,EAAQ2B,EAASC,KAAKA,KAC5BN,EAASJ,EAAkBlB,MAE5B6B,MAAM,SAAA5B,GAELqB,EAASH,EAAkBlB,EAAM6B,iBCsC1BV,CApDf,YAAmD,IAAzBC,EAAwB,EAAxBA,SAAUE,EAAc,EAAdA,WAIlC,OAHAQ,oBAAU,WACRR,KACC,IACIF,EAAStB,QACd,uCACEsB,EAASpB,MACX,4BAAKoB,EAASpB,OAEd,6BACE,0DAEA,kBAAC+B,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,UAAU,cAAeC,MAAO,CAAEC,UAAU,WACxE,+BACE,4BACE,qCACA,uCACA,0CACA,yCACA,uCAGJ,+BACGjB,GACCA,EAASrB,OACTqB,EAASrB,MAAMuC,IAAI,SAAC9B,EAAM+B,GAAP,OACjB,wBAAIC,IAAKhC,EAAKiC,IACZ,4BAAKF,EAAQ,GACb,wBAAIJ,UAAU,eAAc,yBAAMO,IAAKlC,EAAKmC,OAASC,IAAI,GAAGT,UAAU,yCAAtE,MACA,4BAAK3B,EAAKqC,WAAV,KACA,4BAAKrC,EAAKsC,UAAV,KACA,4BAAKtC,EAAKuC,MAAV,aCTDC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUtC,MAAOA,GACf,yBAAKyB,UAAU,OACb,kBAAC,EAAD,SCHYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.4c9e6f25.chunk.js","sourcesContent":["import {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from './userTypes'\n\nconst initialState = {\n  loading: false,\n  users: [],\n  error: ''\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case FETCH_USERS_SUCCESS:\n      return {\n        loading: false,\n        users: action.payload,\n        error: ''\n      }\n    case FETCH_USERS_FAILURE:\n      return {\n        loading: false,\n        users: [],\n        error: action.payload\n      }\n    default: return state\n  }\n}\n\nexport default reducer\n","export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'\n","import { combineReducers } from 'redux'\nimport userReducer from './user/userReducer'\n\nconst rootReducer = combineReducers({\n  user: userReducer\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\nimport rootReducer from './rootReducer'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger, thunk))\n)\n\nexport default store\n","import axios from 'axios'\nimport {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from './userTypes'\n\nexport const fetchUsers = () => {\n  return (dispatch) => {\n    dispatch(fetchUsersRequest())\n    axios\n      .get('https://reqres.in/api/users?page=1')\n      .then(response => {\n        // response.data is the users\n        const users = response.data.data\n        dispatch(fetchUsersSuccess(users))\n      })\n      .catch(error => {\n        // error.message is the error message\n        dispatch(fetchUsersFailure(error.message))\n      })\n  }\n}\n\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  }\n}\n\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users\n  }\n}\n\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  }\n}\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUsers } from \"../redux\";\nimport Table from \"react-bootstrap/Table\";\n\nfunction UsersContainer({ userData, fetchUsers }) {\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  return userData.loading ? (\n    <h2>Loading</h2>\n  ) : userData.error ? (\n    <h2>{userData.error}</h2>\n  ) : (\n    <div>\n      <h2>Users List using Redux API</h2>\n\n      <Table striped bordered hover className=\"redux-table\"  style={{ textAlign:'center'}}>\n        <thead>\n          <tr>\n            <th>Sl No</th>\n            <th>Avathar</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Email</th>\n          </tr>\n        </thead>\n        <tbody>\n          {userData &&\n            userData.users &&\n            userData.users.map((user, index) => (\n              <tr key={user.id}>\n                <td>{index + 1}</td>\n                <td className=\"text-center\"><img  src={user.avatar}  alt=\"\" className=\"img-avatar img-fluid rounded mx-auto\" />  </td>\n                <td>{user.first_name} </td>\n                <td>{user.last_name} </td> \n                <td>{user.email} </td> \n              </tr>\n            ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userData: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: () => dispatch(fetchUsers()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport './App.css'\nimport store from './redux/store'\n// import CakeContainer from './components/CakeContainer'\n// import HooksCakeContainer from './components/HooksCakeContainer'\n// import IceCreamContainer from './components/IceCreamContainer'\n// import NewCakeContainer from './components/NewCakeContainer'\n// import ItemContainer from './components/ItemContainer'\nimport UsersContainer from './components/UsersContainer'\n\nfunction App () {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <UsersContainer />\n        {/* <ItemContainer cake />\n        <ItemContainer />\n        <NewCakeContainer />\n        <CakeContainer />\n        <HooksCakeContainer />\n        <IceCreamContainer /> */}\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}